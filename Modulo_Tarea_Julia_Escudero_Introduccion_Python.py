{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "286df349-ca70-4fb1-8649-acddbc03db3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Antes de empezar, ¿cuál es tu nombre? JULIASD\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Elige una opción:\n",
      "1. Partida modo solitario\n",
      "2. Partida 2 Jugadores\n",
      "3. Estadísticas\n",
      "4. Salir\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Escribe una opción entre 1 y 4:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estas son las estadísticas históricas globales\n",
      "Nombre Dificultad Ganador Numero de intentos startdate enddate duracion \n",
      "Juliaaaaasdassa 1 Ganador 15 2025-01-14 21:34:32.578000 2025-01-14 21:35:23.516000 0:00:50.938000 \n",
      "Juliaaaaasdassa 3 Ganador 2 2025-01-14 21:35:55.300000 2025-01-14 21:36:06.915000 0:00:11.615000 \n",
      "1 1 Ganador 9 2025-01-14 21:51:18.825000 2025-01-14 21:51:55.497000 0:00:36.673000 \n",
      "Juliaaasdasa 3 Ganador 2 2025-01-14 21:56:34.400000 2025-01-14 21:56:41.418000 0:00:07.018000 \n",
      "Julia 3 Ganador 3 2025-01-14 21:59:09.616000 2025-01-14 21:59:18.943000 0:00:09.328000 \n",
      "Julia 1 Ganador 1 2025-01-15 19:18:16.140000 2025-01-15 19:18:18.532000 0:00:02.392000 \n",
      "Julia 1 Ganador 9 2025-01-15 19:21:05.634000 2025-01-15 19:21:38.264000 0:00:32.631000 \n",
      "Julia 3 Perdedor 5 2025-01-15 19:22:11.664000 2025-01-15 19:22:15.018000 0:00:03.354000 \n",
      "Julia 0 Perdedor 0 2025-01-15 19:25:20.594000 2025-01-15 19:25:38.717000 0:00:18.122000 \n",
      "Julia 0 Ganador 2 2025-01-15 19:25:49.176000 2025-01-15 19:25:49.176000 0:00:00 \n",
      "Juliaasdasa 3 Perdedor 5 2025-01-15 20:15:53.923000 2025-01-15 20:16:08.832000 0:00:14.909000 \n",
      "Juliaasdasa 3 Perdedor 5 2025-01-15 20:16:36.001000 2025-01-15 20:16:36.767000 0:00:00.766000 \n",
      "OLEEE 2 Ganador 1 2025-01-15 20:17:00.533000 2025-01-15 20:17:03.306000 0:00:02.774000 \n",
      "Juliasdas 1 Ganador 0 2025-01-15 20:30:53.377000 2025-01-15 20:30:53.377000 0:00:00 \n",
      "Julia 3 Perdedor 5 2025-01-15 20:40:04.715000 2025-01-15 20:40:06.109000 0:00:01.394000 \n",
      "Julia 3 Perdedor 5 2025-01-15 20:41:00.651000 2025-01-15 20:41:07.123000 0:00:06.472000 \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Elige una opción:\n",
      "1. Partida modo solitario\n",
      "2. Partida 2 Jugadores\n",
      "3. Estadísticas\n",
      "4. Salir\n",
      "\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 203\u001b[0m\n\u001b[0;32m    200\u001b[0m                 intentos_restantes, numJ1, numJ2, ganador, startdate, enddate, N_dificultad \u001b[38;5;241m=\u001b[39m juego2()\n\u001b[0;32m    201\u001b[0m                 estadisticas(nombre, opcion, \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m, ganador, N_dificultad, intentos_restantes, startdate, enddate, numJ1, numJ2)\n\u001b[1;32m--> 203\u001b[0m juego()\n",
      "Cell \u001b[1;32mIn[6], line 188\u001b[0m, in \u001b[0;36mjuego\u001b[1;34m()\u001b[0m\n\u001b[0;32m    186\u001b[0m     nombre \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAntes de empezar, ¿cuál es tu nombre?\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m    187\u001b[0m Menu()\n\u001b[1;32m--> 188\u001b[0m opcion\u001b[38;5;241m=\u001b[39mValida(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m4\u001b[39m)\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m opcion \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m4\u001b[39m: \n\u001b[0;32m    190\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSaliendo del programa...\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "Cell \u001b[1;32mIn[6], line 14\u001b[0m, in \u001b[0;36mValida\u001b[1;34m(minimo, maximo)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m opcion \u001b[38;5;241m<\u001b[39m minimo \u001b[38;5;129;01mor\u001b[39;00m opcion \u001b[38;5;241m>\u001b[39m maximo:\n\u001b[0;32m     13\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m---> 14\u001b[0m         opcion \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEscribe una opción entre \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mminimo\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m y \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmaximo\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: \u001b[39m\u001b[38;5;124m'\u001b[39m))\n\u001b[0;32m     15\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m:\n\u001b[0;32m     16\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPor favor, ingresa un número válido.\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[1;32mC:\\Users\\Public\\anaconda3\\Lib\\site-packages\\ipykernel\\kernelbase.py:1262\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1260\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1261\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(msg)\n\u001b[1;32m-> 1262\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1263\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1264\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1265\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1266\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1267\u001b[0m )\n",
      "File \u001b[1;32mC:\\Users\\Public\\anaconda3\\Lib\\site-packages\\ipykernel\\kernelbase.py:1305\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1302\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1303\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[0;32m   1304\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1305\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1306\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1307\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import openpyxl as excel\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import datetime\n",
    "\n",
    "def Menu():\n",
    "    print('\\nElige una opción:\\n1. Partida modo solitario\\n2. Partida 2 Jugadores\\n3. Estadísticas\\n4. Salir\\n')\n",
    "\n",
    "def Valida(minimo, maximo):\n",
    "    opcion = 0\n",
    "    while opcion < minimo or opcion > maximo:\n",
    "        try:\n",
    "            opcion = int(input(f'Escribe una opción entre {minimo} y {maximo}: '))\n",
    "        except ValueError:\n",
    "            print('Por favor, ingresa un número válido.')\n",
    "    return opcion\n",
    "\n",
    "\n",
    "def mostrar_dificultades():\n",
    "    print('\\nIntroduzca el nivel de dificultad\\n1. Fácil (20 intentos)\\n2. Medio (12 intentos)\\n3. Difícil (5 intentos)\\n')\n",
    "\n",
    "\n",
    "def obtener_intentos(N_dificultad):\n",
    "    if N_dificultad == 1:\n",
    "        return 20\n",
    "    if N_dificultad == 2:\n",
    "        return 12\n",
    "    if N_dificultad == 3:\n",
    "        return 5\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def aleatorio():\n",
    "        return random.randint(1, 1000)    \n",
    "\n",
    "def juego1():\n",
    "    mostrar_dificultades()\n",
    "    N_dificultad=Valida(1, 3)\n",
    "    num_secreto=aleatorio()\n",
    "    intentos_restantes = obtener_intentos(N_dificultad)\n",
    "    num = Valida(1,1000)\n",
    "    startdate=datetime.datetime.now()\n",
    "    while num != num_secreto and intentos_restantes!=0:\n",
    "        if num < num_secreto:\n",
    "            print('El número es mayor')\n",
    "        if num > num_secreto:\n",
    "            print('El número es menor')\n",
    "        intentos_restantes=intentos_restantes-1\n",
    "        num = Valida(1,1000)\n",
    "    if intentos_restantes==0:\n",
    "        print('Lo siento pero has perdido la partida')\n",
    "        ganador='Perdedor'\n",
    "    else:\n",
    "        print('Lo has adivinado!')\n",
    "        ganador='Ganador'\n",
    "    enddate=datetime.datetime.now()\n",
    "    return num_secreto, intentos_restantes, num, ganador, startdate, enddate, N_dificultad\n",
    "\n",
    "\n",
    "        \n",
    "def juego2():\n",
    "    mostrar_dificultades()\n",
    "    N_dificultad=Valida(1, 3)\n",
    "    intentos_restantes = obtener_intentos(N_dificultad)\n",
    "    print('Primer jugador: introduzca el número comprendido entre 1 y 1000)')\n",
    "    numJ1 = Valida(1,1000)\n",
    "    print('Segundo jugador: adivina cual es el número elegido por el primer jugador')\n",
    "    numJ2 = Valida(1,1000)\n",
    "    startdate=datetime.datetime.now()\n",
    "    while not numJ1 == numJ2 and intentos_restantes!=0:\n",
    "        print('NO ES EL MISMO NÚMERO, prueba suerte una vez más: ')\n",
    "        if numJ1 < numJ2:\n",
    "            print('El número es menor')\n",
    "        else:\n",
    "            print('El número es mayor')\n",
    "        numJ2 = int(input())\n",
    "        intentos_restantes = intentos_restantes - 1\n",
    "    if intentos_restantes==0:\n",
    "        print('Perdiste')\n",
    "        ganador='Perdedor'\n",
    "    if numJ1 == numJ2:\n",
    "        print('Has acertado :)')\n",
    "        ganador='Ganador'\n",
    "    enddate=datetime.datetime.now()\n",
    "    return intentos_restantes, numJ1, numJ2, ganador, startdate, enddate, N_dificultad\n",
    "\n",
    "def mostrar_estadisticas(opcion):\n",
    "    excel_document=excel.load_workbook(r'C:\\Users\\Julia Escudero\\Documents\\ucm\\4_Introduccion Python\\Juego_Excel\\Estadisticas.xlsx')\n",
    "    HojaJuego1=excel_document['Estadisticas_juego1']\n",
    "    HojaJuego2=excel_document['Estadisticas_juego2']    \n",
    "    HojaGlobal=excel_document['Estadisticas_globales']\n",
    "    if opcion==1:\n",
    "        print('Estas son las estadísticas históricas del primer juego')\n",
    "        for row in HojaJuego1.iter_rows(values_only=True):\n",
    "            for cell in row:\n",
    "                print(f\"{cell} \", end=\"\")\n",
    "            print()\n",
    "    if opcion==2:\n",
    "        print('Estas son las estadísticas históricas del segundo juego')\n",
    "        for row in HojaJuego2.iter_rows(values_only=True):\n",
    "            for cell in row:\n",
    "                print(f\"{cell} \", end=\"\")\n",
    "            print()\n",
    "    if opcion==1 or opcion==2:\n",
    "        print('Estas son las estadísticas históricas globales')\n",
    "        for row in HojaGlobal.iter_rows(values_only=True):\n",
    "            for cell in row:\n",
    "                print(f\"{cell} \", end=\"\") \n",
    "            print()\n",
    "    if opcion==3:\n",
    "        print('Estas son las estadísticas históricas globales')\n",
    "        for row in HojaGlobal.iter_rows(values_only=True):\n",
    "            for cell in row:\n",
    "                print(f\"{cell} \", end=\"\") \n",
    "            print()\n",
    "    excel_document.save(r'C:\\Users\\Julia Escudero\\Documents\\ucm\\4_Introduccion Python\\Juego_Excel\\Estadisticas.xlsx')\n",
    "\n",
    "\n",
    "def estadisticas(nombre, opcion, num_secreto, num, ganador, N_dificultad, intentos_restantes, startdate, enddate, numJ1=None, numJ2=None):\n",
    "    excel_document=excel.load_workbook(r'C:\\Users\\Julia Escudero\\Documents\\ucm\\4_Introduccion Python\\Juego_Excel\\Estadisticas.xlsx')\n",
    "    HojaJuego1=excel_document['Estadisticas_juego1']\n",
    "    HojaJuego2=excel_document['Estadisticas_juego2']    \n",
    "    HojaGlobal=excel_document['Estadisticas_globales']\n",
    "    if opcion==1:\n",
    "        HojaJuego1.append([\n",
    "            nombre,\n",
    "            N_dificultad,\n",
    "            ganador,\n",
    "            num_secreto - num,\n",
    "            num,\n",
    "            num_secreto,\n",
    "            obtener_intentos(N_dificultad) - intentos_restantes,\n",
    "            startdate,\n",
    "            enddate,\n",
    "            enddate-startdate\n",
    "        ])\n",
    "    if opcion==2:\n",
    "        HojaJuego2.append([\n",
    "            nombre,\n",
    "            N_dificultad,\n",
    "            ganador,\n",
    "            numJ1 - numJ2,\n",
    "            numJ1,\n",
    "            numJ2,\n",
    "            obtener_intentos(N_dificultad) - intentos_restantes,\n",
    "            startdate,\n",
    "            enddate,\n",
    "            enddate-startdate\n",
    "        ])\n",
    "    if opcion==1 or opcion==2:\n",
    "        HojaGlobal.append([\n",
    "            nombre,\n",
    "            N_dificultad,\n",
    "            ganador,\n",
    "            obtener_intentos(N_dificultad) - intentos_restantes,\n",
    "            startdate,\n",
    "            enddate,\n",
    "            enddate-startdate\n",
    "        ])\n",
    "    excel_document.save(r'C:\\Users\\Julia Escudero\\Documents\\ucm\\4_Introduccion Python\\Juego_Excel\\Estadisticas.xlsx')\n",
    "    \n",
    "def grafico():\n",
    "    print('En este gráfico se muestra en un histograma la cantidad de ganadores y de perdedores que tiene el juego en global')\n",
    "    intentos = []\n",
    "    resultados = []\n",
    "    excel_document = excel.load_workbook(r'C:\\Users\\Julia Escudero\\Documents\\ucm\\4_Introduccion Python\\Juego_Excel\\Estadisticas.xlsx')\n",
    "    HojaGlobal = excel_document['Estadisticas_globales']\n",
    "    for row in HojaGlobal.iter_rows(min_row=2, values_only=True):\n",
    "        intentos.append(row[6])\n",
    "        resultados.append(row[2])\n",
    "    ganadores = resultados.count('Ganador')\n",
    "    perdedores = resultados.count('Perdedor')\n",
    "    plt.bar(['Ganadores', 'Perdedores'], [ganadores, perdedores], color=['green', 'red'])\n",
    "    plt.title('Resultado del Juego (Ganadores vs Perdedores)')\n",
    "    plt.xlabel('Resultado')\n",
    "    plt.ylabel('Cantidad de Juegos')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def juego():\n",
    "    nombre=\"\"\n",
    "    opcion=0\n",
    "    N_dificultad=0\n",
    "    while opcion!=4:\n",
    "        if nombre==\"\":\n",
    "            nombre = input('Antes de empezar, ¿cuál es tu nombre?')\n",
    "        Menu()\n",
    "        opcion=Valida(1,4)\n",
    "        if opcion == 4: \n",
    "            print('Saliendo del programa...')\n",
    "            break\n",
    "        if opcion==3:\n",
    "            mostrar_estadisticas(opcion)\n",
    "            grafico()\n",
    "        if opcion==1 or opcion==2:\n",
    "            if opcion==1:\n",
    "                num_secreto, intentos_restantes, num, ganador, startdate, enddate, N_dificultad = juego1()\n",
    "                estadisticas(nombre, opcion, num_secreto, num, ganador, N_dificultad, intentos_restantes, startdate, enddate)\n",
    "            if opcion==2:\n",
    "                intentos_restantes, numJ1, numJ2, ganador, startdate, enddate, N_dificultad = juego2()\n",
    "                estadisticas(nombre, opcion, None, None, ganador, N_dificultad, intentos_restantes, startdate, enddate, numJ1, numJ2)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
